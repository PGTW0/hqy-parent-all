// 镜像仓库地址
def registry = "registry.cn-shenzhen.aliyuncs.com"
// 命名空间
def namespace = "hqy-parent-all"
// 镜像仓库项目
def project = "collector-service"
//镜像版本号
def image_version="1.0-dev"
// 镜像完整名称
def image_name = "${registry}/${namespace}/${project}:${image_version}"
// git仓库地址
def git_address = "https://github.com/nauyiq/hqy-parent-all.git"
// 分支
def branch = "*/dev"
// jenkins aliyun认证
def aliyunhub_auth = "aliyun_mirror_server"
// K8s认证
def k8s_auth = "kubeconfig"
// aliyun仓库secret_name
def aliyun_registry_secret = "aliyun-pull-secret"
def serverPort = "8888"

def base_dir = "/home/jenkins/agent/workspace/hqy-parent-all_dev"


podTemplate(
    label: 'jenkins-agent',
    cloud: 'kubernetes',
    containers: [
//         containerTemplate(name: 'jnlp', image: "docker.io/jenkins/jnlp-slave:latest"),
        containerTemplate(name: 'jnlp', image: "registry.cn-shenzhen.aliyuncs.com/hqy-parent-all/jnlp-slave:latest",  alwaysPullImage: false),
        containerTemplate(name: 'docker', image: 'docker.io/docker:latest', ttyEnabled: true, command: 'cat')
    ],
    volumes: [
        hostPathVolume(mountPath: '/var/run/docker.sock', hostPath: '/var/run/docker.sock')
//         persistentVolumeClaim(mountPath: '/home/jenkins/.m2/', claimName: 'jenkins-mavenrepo')
    ]){
    node('jenkins-agent'){

        stage('Git Clone') {
            sh """
            echo start git clone
            git config --global http.postBuffer 600000
            """
            checkout([
            $class: 'GitSCM',
            branches: [[name: '*/dev']],
            userRemoteConfigs: [[credentialsId: "", url: "https://github.com/nauyiq/hqy-parent-all.git"]],
            extensions: [[$class: 'CloneOption', depth: 1, noTags: false, reference: '', shallow: true]]
            ])
        }

         stage('Maven Build') {
            sh """
                ls
                cd ${base_dir}
                mvn clean compile package -Dmaven.test.skip=true
            """
         }

        stage('Build Image') {
            container('docker') {
                stage('Package Image') {
                   withCredentials([usernamePassword(credentialsId: "${aliyunhub_auth}", passwordVariable: 'password', usernameVariable: 'username')]) {
                   sh """
                      cd ${base_dir}
                      docker build -t ${image_name} ${base_dir}/hqy-common-modules/hqy-common-collector-impl/deploy
                      docker login -u ${username} -p '${password}' ${registry}
                      docker push ${image_name}
                   """
                    }
                }
            }
        }

        stage('部署到K8s'){
            sh """
                sed -i 's#\$IMAGE_NAME#${image_name}#' ${base_dir}/hqy-common-modules/hqy-common-collector-impl/deploy/deployment.yaml
                sed -i 's#\$SECRET_NAME#${aliyun_registry_secret}#' ${base_dir}/hqy-common-modules/hqy-common-collector-impl/deploy/deployment.yaml
                sed -i 's#\$SERVICE_PORT#${serverPort}#' ${base_dir}/hqy-common-modules/hqy-common-collector-impl/deploy/deployment.yaml

            """
             kubernetesDeploy configs: '${base_dir}/hqy-common-modules/hqy-common-collector-impl/deploy/deployment.yaml', kubeconfigId: "${k8s_auth}"
        }
    }
}
